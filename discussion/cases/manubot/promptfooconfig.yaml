prompts:
  - file://../../prompts/baseline.txt
  - file://../../prompts/candidate_with_metadata.txt
  - file://../../prompts/candidate.txt

# Default asserts applied to each test case below
defaultTest:
  # Make sure that output...
  assert:
    # ...starts with capital letter
    - type: python
      value: |
        description = "Starts with capital letter"
        type = "Formatting"
        score = 0.25

        res = output.strip()[0].isupper()

        return {
          "pass": res,
          "score": score if res else 0.0,
          "reason": "Passed" if res else "Failed",
          "assertion": {
            "value": description,
            "type": type,
          },
        }

    # ...ends with period
    - type: python
      value: |
        description = "Ends with a period"
        type = "Formatting"
        score = 0.25

        res = output.strip()[-1] == "."

        return {
          "pass": res,
          "score": score if res else 0.0,
          "reason": "Passed" if res else "Failed",
          "assertion": {
            "value": description,
            "type": type,
          },
        }

    # ...is a single paragraph
    - type: python
      value: |
        description = "Is a single paragraph"
        type = "Formatting"
        score = 0.25

        res = len(output.strip().split("\n")) == 1

        return {
          "pass": res,
          "score": score if res else 0.0,
          "reason": "Passed" if res else "Failed",
          "assertion": {
            "value": description,
            "type": type,
          },
        }

    # ...doesn't include manuscript title
    - type: python
      value: |
        description = "Doesn't include manuscript title"
        type = "Formatting"
        score = 0.25

        res = (context["vars"]["title"] not in output)

        return {
          "pass": res,
          "score": score if res else 0.0,
          "reason": "Passed" if res else "Failed",
          "assertion": {
            "value": description,
            "type": type,
          },
        }

    # ...doesn't reference authors, keywords, abstract, etc
    - type: python
      value: |
        description = "Doesn't reference authors, keywords, abstract, etc"
        type = "Formatting"
        score = 0.25

        keywords = [
          "authors",
          "Abstract:",
          "Keywords:",
          "References:",
        ]
        res = not any(kw in output for kw in keywords)

        return {
          "pass": res,
          "score": score if res else 0.0,
          "reason": "Passed" if res else "Failed",
          "assertion": {
            "value": description,
            "type": type,
          },
        }

    # ...is roughly same length as input
    - type: python
      value: |
        description = "Has roughly the same length as input"
        type = "Formatting"
        score = 0.25

        input = context["vars"]["content"]
        input_words = len(input.strip().split())
        output_words = len(output.strip().split())

        res = (output_words > 0.5 * input_words) and (output_words < 1.5 * input_words)

        return {
          "pass": res,
          "score": score if res else 0.0,
          "reason": "Passed" if res else "Failed",
          "assertion": {
            "value": description,
            "type": type,
          },
        }

# Make sure that output...
tests:
  # ...provides context before conclusion
  - vars:
      test_description: Provides context before conclusion
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/context_conclusion_swapped.md
    assert:
      - type: python
        value: |
          description = "Starts with context"
          type = "Structure"
          score = 2.0

          keywords = ["science", "internet", "global", "public"]
          first_sentences = ".".join(output.lower().split(".")[:2])
          res = len([x in first_sentences for x in keywords]) >= 2

          return {
            "pass": res,
            "score": score if res else 0.0,
            "reason": "Passed" if res else "Failed",
            "assertion": {
              "value": description,
              "type": type,
            },
          }

      - type: python
        value: |
          description = "Ends with conclusion"
          type = "Structure"
          score = 2.0

          keywords = ["software", "data", "study", "new", "research"]
          last_sentences = ".".join(output.lower().split(".")[-3:])
          res = len([x in last_sentences for x in keywords]) >= 2

          return {
            "pass": res,
            "score": score if res else 0.0,
            "reason": "Passed" if res else "Failed",
            "assertion": {
              "value": description,
              "type": type,
            },
          }
