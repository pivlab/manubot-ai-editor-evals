prompts:
  - file://../../prompts/baseline.txt
  - file://../../prompts/candidate.txt

# Default asserts applied to each test case below
defaultTest:
  # Make sure that output...
  assert:
    # ...starts with capital letter
    - type: python
      value: output.strip()[0].isupper()

    # ...ends with period
    - type: python
      value: output.strip()[-1] == "."

    # ...is a single paragraph
    - type: python
      value: len(output.strip().split("\n")) == 1

    # ...doesn't include manuscript title
    - type: python
      value: context["vars"]["title"] not in output

    # ...doesn't reference authors, keywords, introduction, etc
    - type: not-icontains-any
      value:
        - "authors"
        - "Introduction:"
        - "Keywords:"
        - "References:"

    # ...is roughly same length as input
    - type: python
      value: |
        input = context["vars"]["content"]
        input_words = len(input.strip().split())
        output_words = len(output.strip().split())
        response = (output_words > 0.5 * input_words) and (output_words < 1.6 * input_words)
        print(response)

    # ...preserves most references
    # - type: python
    #   value: |
    #     references = [
    #       "@pmid:19104045",
    #       "@doi:10.1038/ng.3259",
    #       "@doi:10.1038/s41467-018-06022-6",
    #       "@doi:10.1126/science.aaz1776",
    #       "@doi:10.1038/s41586-020-2559-3",
    #       "@doi:10.1038/s41576-019-0200-9",
    #       "@doi:10.1038/ng.3314",
    #       "@doi:10.1371/journal.pgen.1008489",
    #       "@doi:10.1038/nature11247",
    #       "@doi:10.1038/nature14248",
    #       "@doi:10.1038/nature12787",
    #       "@doi:10.1038/s41586-020-03145-z",
    #       "@doi:10.1038/s41586-020-2559-3",
    #       "@doi:10.1126/science.aaz1776",
    #       "@doi:10.1038/s41588-018-0081-4",
    #       "@doi:10.1016/j.ajhg.2018.04.002",
    #       "@doi:10.1038/s41588-018-0081-4",
    #       "@doi:10.1038/ncomms6890",
    #       "@pmid:20624743",
    #       "@pmid:14707169",
    #       "@doi:10.1073/pnas.0810772105",
    #     ]
    #     count = len([reference for reference in references if reference in output])
    #     print(count / len(references) > 0.5)

# Make sure that output...
tests:
  # ...has no spelling/grammar errors
  - vars:
      test_description: Has no spelling/grammar errors
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_spelling_errors.md
    assert:
      - type: not-icontains-any
        value:
          - "karry"
          - "ekspression"
          - "improoved"

  # ...doesn't end with conclusion
  - vars:
      test_description: Doesn't end with conclusion
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_conclusion.md
    assert:
      - type: python
        value: |
          # look for "conclusion" words
          keywords = [
            "overall",
            "conclusion",
            "insight",
            "novel",
            "potential",
            "broader",
            "ultimately",
            "advancement",
            "valuable",
            "our study",
            "this study",
            "our work",
            "this work",
            "our approach",
            "research",
            "critical gap",
            "understanding",
            "powerful",
            "advancing",
            "importance",
            "findings",
            "highlight",
            "promise",
            "promising",
            "innovative",
            "perspective",
            "refine",
            "refining",
            "accelerate",
            "accelerating",
            "facilitate",
            "facilitating",
            "pinpoint",
            "implications",
            "reveal",
          ]
          # try to capture the first paragraph (because sometimes models add
          # explanations below the revised paragraph)
          first_paragraph = output.strip().split("\n")[0]
          last_sentences = ".".join(first_paragraph.strip().split(".")[-2:]).lower()
          response = any(keyword in last_sentences for keyword in keywords)
          print(response)
