prompts:
  - file://../../prompts/baseline.txt
  - file://../../prompts/candidate.txt

# Default asserts applied to each test case below
defaultTest:
  # Make sure that output...
  assert:
    # ...starts with capital letter
    - type: python
      value: output.strip()[0].isupper()

    # ...ends with period
    - type: python
      value: output.strip()[-1] == "."

    # ...is a single paragraph
    - type: python
      value: len(output.strip().split("\n")) == 1

    # ...doesn't include manuscript title
    - type: python
      value: context["vars"]["title"] not in output

    # ...doesn't reference authors, keywords, introduction, etc
    - type: not-icontains-any
      value:
        - "authors"
        - "Introduction:"
        - "Keywords:"
        - "References:"

    # ...is roughly same length as input
    - type: python
      value: |
        input = context["vars"]["content"]
        input_words = len(input.strip().split())
        output_words = len(output.strip().split())
        response = (output_words > 0.5 * input_words) and (output_words < 2 * input_words)
        return response

# Make sure that output...
tests:
  # ...has no spelling or grammar errors
  - vars:
      test_description: Has no spelling errors
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_spelling_and_grammar_errors.md
    assert:
      - type: not-icontains-any
        value:
          - "karry"
          - "ekspression"
          - "improoved"
          - "studies has"

  # ...keeps most references to other articles and doesn't make them up
  - vars:
      test_description: Keeps most references to other articles and doesn't make them up
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_references_to_articles.md
    assert:
      - type: python
        value: |
          input = context["vars"]["content"]
          
          references = {
            "@doi:10.1038/nbt.3838",
            "@doi:10.1038/s41467-018-03751-6",
            "@doi:10.1126/science.aaz1776",
            "@doi:10.1186/s13040-020-00216-9",
            "@doi:10.1371/journal.pgen.1009482",
            "@doi:10.1038/ng.3506",
            "@doi:10.1371/journal.pgen.1007889",
            "@doi:10.1038/ng.3367",
            "@pmid:33931583",
            "@doi:10.1101/2021.10.21.21265225",
            "@pmid:31036433",
            "@doi:10.1186/s13059-021-02591-w",
            "@doi:10.1038/nn.4618",
          }
          
          # keep only references that are present in the input (this is needed because
          #  references might be removed from the input in some cases)
          references = [ref for ref in references if ref in input]
          
          count = len([ref for ref in references if ref in output])
          return (count / len(references) > 0.50)

      - type: python
        value: |
          import re
          
          input = context["vars"]["content"]
          
          references = {
            "@doi:10.1038/nbt.3838",
            "@doi:10.1038/s41467-018-03751-6",
            "@doi:10.1126/science.aaz1776",
            "@doi:10.1186/s13040-020-00216-9",
            "@doi:10.1371/journal.pgen.1009482",
            "@doi:10.1038/ng.3506",
            "@doi:10.1371/journal.pgen.1007889",
            "@doi:10.1038/ng.3367",
            "@pmid:33931583",
            "@doi:10.1101/2021.10.21.21265225",
            "@pmid:31036433",
            "@doi:10.1186/s13059-021-02591-w",
            "@doi:10.1038/nn.4618",
          }
          
          # keep only references that are present in the input (this is needed because
          #  references might be removed from the input in some cases)
          references = [ref for ref in references if ref in input]
          
          # capture current references in the output using a regex
          output_references = re.findall(r'@[^ ;\]]+', output)
          
          n_fake_refs = len([ref for ref in output_references if ref not in references])
          return (n_fake_refs == 0)

  # adheres to C-C-C by starting with context
  - vars:
      test_description: starts with context
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/doesnt_start_with_context.md
    assert:
      - type: python
        value: ("transcription-wide association stud" in output.split(".")[0].lower())

  # adheres to C-C-C by ending with a conclusion
  - vars:
      test_description: ends with conclusion
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/doesnt_end_with_conclusion.md
    assert:
      - type: python
        value: ("however" in output.split(".")[-2].lower())

  # adheres to guidelines by treating last paragraph as a special case:
  #  - it does not define any gaps, since all that done in the previous paragraphs
  #  - it compactly summarizes the results
  #  TODO: complete/define
  - vars:
      test_description: has proper last paragraph structure
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/original_last_paragraph.md
    assert:
      - type: python
        value: ("PhenoPLIER" in output.split(".")[0])
