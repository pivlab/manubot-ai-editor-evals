prompts:
  - file://../../prompts/baseline.txt
  - file://../../prompts/candidate.txt

# Default asserts applied to each test case below
defaultTest:
  assert:
    # Starts with capital letter
    - type: python
      value: output.strip()[0].isupper()

    # Ends with period
    - type: python
      value: output.strip()[-1] == "."

    # Single paragraph
    - type: python
      value: len(output.strip().split("\n")) == 1

    # No manuscript title
    - type: python
      value: context["vars"]["title"] not in output

    # No references to authors, keywords, introduction, etc
    - type: not-icontains-any
      value:
        - "authors"
        - "Introduction:"
        - "Keywords:"
        - "References:"

    # Length of output roughly same as length of input
    - type: python
      value: |
        input = context["vars"]["content"]
        input_words = len(input.strip().split())
        output_words = len(output.strip().split())
        response = (output_words > 0.5 * input_words) and (output_words < 1.6 * input_words)
        print(response)

    # Most references are preserved
    # - type: python
    #   value: |
    #     references = [
    #       "@pmid:19104045",
    #       "@doi:10.1038/ng.3259",
    #       "@doi:10.1038/s41467-018-06022-6",
    #       "@doi:10.1126/science.aaz1776",
    #       "@doi:10.1038/s41586-020-2559-3",
    #       "@doi:10.1038/s41576-019-0200-9",
    #       "@doi:10.1038/ng.3314",
    #       "@doi:10.1371/journal.pgen.1008489",
    #       "@doi:10.1038/nature11247",
    #       "@doi:10.1038/nature14248",
    #       "@doi:10.1038/nature12787",
    #       "@doi:10.1038/s41586-020-03145-z",
    #       "@doi:10.1038/s41586-020-2559-3",
    #       "@doi:10.1126/science.aaz1776",
    #       "@doi:10.1038/s41588-018-0081-4",
    #       "@doi:10.1016/j.ajhg.2018.04.002",
    #       "@doi:10.1038/s41588-018-0081-4",
    #       "@doi:10.1038/ncomms6890",
    #       "@pmid:20624743",
    #       "@pmid:14707169",
    #       "@doi:10.1073/pnas.0810772105",
    #     ]
    #     count = len([reference for reference in references if reference in output])
    #     print(count / len(references) > 0.5)

# Test cases
tests:
  - vars:
      test_description: Has spelling/grammar errors
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_spelling_errors.md
    assert:
      # No spelling errors
      - type: not-icontains-any
        value:
          - "karry"
          - "ekspression"
          - "improoved"

  - vars:
      test_description: Does not include a conclusion
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_conclusion.md
