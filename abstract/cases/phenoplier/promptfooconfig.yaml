prompts:
  - file://../../prompts/baseline.txt
  - file://../../prompts/candidate.txt
providers:
  - id: ollama:mistral:7b-instruct-fp16
#    config:
#      temperature: 0.5
#      num_predict: 1024
#      stop: ["\r\n"]
# Here I defined default asserts that are applied to all test cases below
defaultTest:
  assert:
    # Starts with capital letter
    - type: python
      value: output.strip()[0].isupper()

    # Ends with period
    - type: python
      value: output.strip()[-1] == "."

    # Single paragraph
    - type: python
      value: len(output.strip().split("\n")) == 1

    # No manuscript title
    - type: python
      value: context["vars"]["title"] not in output

    # No references to authors, keywords, abstract, etc
    - type: not-icontains-any
      value:
        - "authors"
        - "Abstract:"
        - "Keywords:"
        - "References:"
    # Length of output roughly same as length of input
    - type: python
      value: |
        paragraph = context["vars"]["paragraph"]
        paragraph_words = len(paragraph.strip().split())
        output_words = len(output.strip().split())
        response = (output_words > 0.5 * paragraph_words) and (output_words < 1.6 * paragraph_words)
        print(response)
    # CRISPR results are mentioned
    - type: contains
      value: "CRISPR"
tests:
  - vars:
      test_description: spelling/grammar errors
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      paragraph: file://./inputs/has_spelling_errors.md
    assert:
      # No spelling errors
      - type: not-icontains-any
        value:
          - "concierto"
          - "specifico"
          - "significantl "
  - vars:
      test_description: does not start with background
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      paragraph: file://./inputs/no_background.md
    assert:
      # Method not mentioned at beginning
      - type: python
        value: ("PhenoPLIER" not in output.split(".")[0])
  - vars:
      test_description: does not describe the method or approach proposed
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      paragraph: file://./inputs/no_method_description.md
    assert:
      # Method mentioned before results
      - type: python
        value: |
          methods_start = output.find("PhenoPLIER")
          results_start = max(
              output.find("CRISPR"),
              output.find("lipid"),
              output.find("drug-disease"),
          )
          response = methods_start < results_start
          print(response)
  - vars:
      test_description: does not provide an interpretation of the results and their implications
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      paragraph: file://./inputs/no_interpretation.md
    assert:
      # Conclusions included
      - type: python
        value: |
          keywords = [
            "overall",
            "conclusion",
            "insight",
            "novel",
            "potential",
            "broader",
            "ultimately",
            "advancement",
            "valuable",
            "our study",
            "this study",
            "our work",
            "this work",
            "our approach",
            "research",
            "critical gap",
            "understanding",
            "powerful",
            "advancing",
            "importance",
            "findings",
            "highlight",
            "promise",
            "promising",
            "innovative",
            "perspective",
            "refine ",
            "refining",
            "accelerate",
            "accelerating",
            "facilitate",
            "facilitating",
            "pinpoint",
            "implications",
            "reveal",
          ]
          # try to capture the first paragraph (because sometimes models add
          # explanations below the revised paragraph)
          first_paragraph = output.strip().split("\n")[0]
          last_sentences = ".".join(first_paragraph.strip().split(".")[-2:]).lower()
          response = any(s in last_sentences for s in keywords)
          print(response)

