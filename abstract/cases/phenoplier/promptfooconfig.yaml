prompts:
  - file://../../prompts/baseline.txt
  - file://../../prompts/candidate.txt

providers:
  - id: ollama:mistral:7b-instruct-fp16
    # config:
    #   temperature: 0.5
    #   num_predict: 1024
    #   stop: ["\r\n"]

# Default asserts applied to each test case below
defaultTest:
  assert:
    # Starts with capital letter
    - type: python
      value: output.strip()[0].isupper()

    # Ends with period
    - type: python
      value: output.strip()[-1] == "."

    # Single paragraph
    - type: python
      value: len(output.strip().split("\n")) == 1

    # No manuscript title
    - type: python
      value: context["vars"]["title"] not in output

    # No references to authors, keywords, abstract, etc
    - type: not-icontains-any
      value:
        - "authors"
        - "Abstract:"
        - "Keywords:"
        - "References:"

    # Length of output roughly same as length of input
    - type: python
      value: |
        input = context["vars"]["content"]
        input_words = len(input.strip().split())
        output_words = len(output.strip().split())
        response = (output_words > 0.5 * input_words) and (output_words < 1.6 * input_words)
        print(response)

    # CRISPR results are mentioned
    - type: contains
      value: "CRISPR"

# Test cases
tests:
  - vars:
      test_description: Has spelling/grammar errors
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/has_spelling_errors.md
    assert:
      # No spelling errors
      - type: not-icontains-any
        value:
          - "concierto"
          - "specifico"
          - "significantl "

  - vars:
      test_description: Does not start with background
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/no_background.md
    assert:
      # Method not mentioned at beginning
      - type: python
        value: ("PhenoPLIER" not in output.split(".")[0])

  - vars:
      test_description: Does not describe method
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/no_method_description.md
    assert:
      # Method mentioned before results
      - type: python
        value: |
          methods_start = output.find("PhenoPLIER")
          results_start = max(
              output.find("CRISPR"),
              output.find("lipid"),
              output.find("drug-disease"),
          )
          response = methods_start < results_start
          print(response)

  - vars:
      test_description: No interpretation of results
      title: file://./inputs/title.txt
      keywords: file://./inputs/keywords.txt
      content: file://./inputs/no_interpretation.md
    assert:
      # Conclusion included
      - type: python
        value: |
          keywords = [
            "overall",
            "conclusion",
            "insight",
            "novel",
            "potential",
            "broader",
            "ultimately",
            "advancement",
            "valuable",
            "our study",
            "this study",
            "our work",
            "this work",
            "our approach",
            "research",
            "critical gap",
            "understanding",
            "powerful",
            "advancing",
            "importance",
            "findings",
            "highlight",
            "promise",
            "promising",
            "innovative",
            "perspective",
            "refine",
            "refining",
            "accelerate",
            "accelerating",
            "facilitate",
            "facilitating",
            "pinpoint",
            "implications",
            "reveal",
          ]
          # try to capture the first paragraph (because sometimes models add
          # explanations below the revised paragraph)
          first_paragraph = output.strip().split("\n")[0]
          last_sentences = ".".join(first_paragraph.strip().split(".")[-2:]).lower()
          response = any(keyword in last_sentences for keyword in keywords)
          print(response)
